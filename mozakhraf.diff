diff --git a/.idea/dataSources.xml b/.idea/dataSources.xml
index 005ee75..a5301d5 100644
--- a/.idea/dataSources.xml
+++ b/.idea/dataSources.xml
@@ -1,11 +1,11 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="DataSourceManagerImpl" format="xml" multifile-model="true">
-    <data-source source="LOCAL" name="gwent.db" uuid="3dd70a7d-0e43-4090-97a0-f3e9daf7737b">
+    <data-source source="LOCAL" name="users.db" uuid="3549e978-28b2-4af7-9869-8cfe7374d605">
       <driver-ref>sqlite.xerial</driver-ref>
       <synchronize>true</synchronize>
       <jdbc-driver>org.sqlite.JDBC</jdbc-driver>
-      <jdbc-url>jdbc:sqlite:$USER_HOME$/gwent-data/gwent.db</jdbc-url>
+      <jdbc-url>jdbc:sqlite:$USER_HOME$/gwent-server-db/users.db</jdbc-url>
       <working-dir>$ProjectFileDir$</working-dir>
     </data-source>
   </component>
diff --git a/gwent-client/src/main/java/org/apgrp10/gwent/client/Gwent.java b/gwent-client/src/main/java/org/apgrp10/gwent/client/Gwent.java
index 0f61874..7f52916 100644
--- a/gwent-client/src/main/java/org/apgrp10/gwent/client/Gwent.java
+++ b/gwent-client/src/main/java/org/apgrp10/gwent/client/Gwent.java
@@ -9,9 +9,7 @@ import javafx.stage.Stage;
 import javafx.stage.Window;
 import org.apgrp10.gwent.client.controller.UserController;
 import org.apgrp10.gwent.client.model.TerminalAsyncReader;
-import org.apgrp10.gwent.client.view.AbstractStage;
-import org.apgrp10.gwent.client.view.LoginStage;
-import org.apgrp10.gwent.client.view.MainStage;
+import org.apgrp10.gwent.client.view.*;
 import org.apgrp10.gwent.utils.ANSI;
 
 import java.io.IOException;
@@ -19,6 +17,7 @@ import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.Set;
 import java.util.function.Consumer;
 
@@ -50,15 +49,26 @@ public class Gwent extends Application {
 	}
 
 	public static void forEachStage(Consumer<Stage> action) {
+		HashSet<Stage> toApply = new HashSet<>();
 		for (Window window : new ArrayList<>(Window.getWindows()))
 			if (window instanceof Stage stage)
-				action.accept(stage);
+				toApply.add(stage);
+		toApply.add(LoginStage.getInstance());
+		toApply.add(MainStage.getInstance());
+		toApply.add(ProfileStage.getInstance());
+		toApply.add(FriendshipStage.getInstance());
+		toApply.add(ScoreboardStage.getInstance());
+		toApply.add(PreGameStage.getInstance());
+		toApply.add(GameStage.getInstance());
+		toApply.add(MessageStage.getInstance());
+		toApply.forEach(action);
 	}
 
 	public static void forEachAbstractStage(Consumer<AbstractStage> action) {
-		for (Window window : new ArrayList<>(Window.getWindows()))
-			if (window instanceof AbstractStage stage)
-				action.accept(stage);
+		forEachStage(stage -> {
+			if(stage instanceof AbstractStage abstractStage)
+				action.accept(abstractStage);
+		});
 	}
 
 	@Override
@@ -72,6 +82,8 @@ public class Gwent extends Application {
 			LoginStage.getInstance().start();
 		else
 			MainStage.getInstance().start();
+
+		// TODO: Enable This
 		ClientMain.connect(); // Start the connection javafx is fully ready
 	}
 
diff --git a/gwent-client/src/main/java/org/apgrp10/gwent/client/controller/ChatMenuController.java b/gwent-client/src/main/java/org/apgrp10/gwent/client/controller/ChatMenuController.java
index eeaac2b..7886a6d 100644
--- a/gwent-client/src/main/java/org/apgrp10/gwent/client/controller/ChatMenuController.java
+++ b/gwent-client/src/main/java/org/apgrp10/gwent/client/controller/ChatMenuController.java
@@ -20,6 +20,7 @@ public class ChatMenuController {
 	private ChatMenuController() {}
 
 	private void reset() {
+		// TODO: move these to the onCreate method in MessageStage
 		this.chatMenu = new ChatPane(this);
 		scene = new Scene(chatMenu);
 		scene.getStylesheets().add(R.get("css/chat.css").toExternalForm());
diff --git a/gwent-client/src/main/java/org/apgrp10/gwent/client/controller/PreGameController.java b/gwent-client/src/main/java/org/apgrp10/gwent/client/controller/PreGameController.java
index c91ac89..952943b 100644
--- a/gwent-client/src/main/java/org/apgrp10/gwent/client/controller/PreGameController.java
+++ b/gwent-client/src/main/java/org/apgrp10/gwent/client/controller/PreGameController.java
@@ -4,7 +4,10 @@ import com.google.gson.reflect.TypeToken;
 import javafx.stage.Stage;
 import org.apgrp10.gwent.client.Gwent;
 import org.apgrp10.gwent.client.Server;
+import org.apgrp10.gwent.client.view.Dialogs;
 import org.apgrp10.gwent.client.view.GameStage;
+import org.apgrp10.gwent.client.view.MainStage;
+import org.apgrp10.gwent.client.view.PreGameStage;
 import org.apgrp10.gwent.model.Command;
 import org.apgrp10.gwent.model.Deck;
 import org.apgrp10.gwent.model.User;
@@ -18,9 +21,35 @@ import java.util.function.Consumer;
 
 public class PreGameController {
 
+	public static final int NONE = 0, WAITING = 1, DECLINED = 2, CANCELED = 3;   // Accepted is also none
+	public static int lastRequestStatus = NONE;
 	private PreGameController() {}
 
+	public static Response handlePlayRequest(Request request) {
+		long from = request.getBody().get("from").getAsLong();
+		boolean isPublic = request.getBody().get("isPublic").getAsBoolean();
+		UserController.getUserInfo(from, false, publicInfo -> {
+			ANSI.log("Play Request Received From: " + publicInfo.username());
+			if(MainStage.getInstance().isShowing()){
+				boolean result = MainStage.getInstance().showConfirmDialog(Dialogs.INFO(), "Play Request",
+						"You have a play request from " + publicInfo.username() + "\n" +
+						"The Game Will be " + (isPublic ? "Public" : "Private") + "\n" +
+						"Do you want to play?",
+						"Select Deck", "Cancel");
+				if(result) {
+					Gwent.forEachStage(Stage::close);
+					PreGameStage.getInstance().setupFriendMode(isPublic);
+					PreGameStage.getInstance().start();
+					return;
+				}
+			}
+			Server.send(new Request("declinePlayRequest")); // Decline the request
+		});
+		return request.response(Response.OK_NO_CONTENT);
+	}
+
 	public static Response startGame(Request request) {
+		lastRequestStatus = NONE;
 		Server.setListener(request.getAction(), null);
 		long seed = request.getBody().get("seed").getAsLong();
 		User.PublicInfo user1 = MGson.fromJson(request.getBody().get("user1"), User.PublicInfo.class);
@@ -49,18 +78,21 @@ public class PreGameController {
 				return request.response(Response.BAD_REQUEST);
 			}
 		}
-		Gwent.forEachStage(Stage::close);
 		GameStage.getInstance().start();
 		return request.response(Response.OK_NO_CONTENT);
 	}
 
-	public static void randomPlayRequest(Deck deck, Consumer<Response> callback) {
-		Server.send(new Request("randomPlayRequest", MGson.makeJsonObject("deck", deck.toJson())), res -> {
+	public static void requestPlay(Deck deck, long target, boolean isPublic, Consumer<Response> callback)
+	{
+		Server.send(new Request("requestPlay", MGson.makeJsonObject(
+				"deck", deck.toJson(), "target", target, "isPublic", isPublic)), res -> {
 			if (res.isOk()) {
-				ANSI.log("Random Play Request Sent");
+				ANSI.log("Play Request Sent");
 				Server.setListener("start", PreGameController::startGame);
+				lastRequestStatus = WAITING;
 			} else {
-				ANSI.log("Failed to send Random Play Request");
+				lastRequestStatus = NONE;
+				ANSI.log("Failed to send Play Request");
 				if (res.getStatus() == Response.INTERNAL_SERVER_ERROR)
 					ANSI.printErrorResponse(null, res);
 			}
@@ -68,24 +100,29 @@ public class PreGameController {
 		});
 	}
 
-	public static void cancelRandomPlayRequest() {
-		Server.send(new Request("cancelRandomPlayRequest"), res -> {
+	public static void cancelPlayRequest() {
+		Server.send(new Request("cancelPlayRequest"), res -> {
 			if (res.isOk()) {
-				ANSI.log("Random Play Request Cancelled");
+				ANSI.log("Play Request Cancelled");
 				Server.setListener("start", null);
+				lastRequestStatus = CANCELED;
 			} else {
-				ANSI.log("Failed to cancel Random Play Request");
+				lastRequestStatus = NONE;
+				ANSI.log("Failed to cancel Play Request");
 				if (res.getStatus() == Response.INTERNAL_SERVER_ERROR)
 					ANSI.printErrorResponse(null, res);
 			}
 		});
 	}
 
-	public static boolean isWaitingForOpponent() {
-		return Server.hasListener("start");
+	public static Response handlePlayRequestDecline(Request request) {
+		ANSI.log("Play Request Declined");
+		Server.setListener("start", null);
+		lastRequestStatus = DECLINED;
+		return request.response(Response.OK_NO_CONTENT);
+	}
+
+	public static int getLastRequestState() {
+		return lastRequestStatus;
 	}
-//	public static void startGame(User opponent, Deck deck) {
-//		PreGameMenu.getInstance().close();
-//		GameController.startGame(opponent, deck);
-//	}
 }
diff --git a/gwent-client/src/main/java/org/apgrp10/gwent/client/controller/UserController.java b/gwent-client/src/main/java/org/apgrp10/gwent/client/controller/UserController.java
index a0fa019..7c906bf 100644
--- a/gwent-client/src/main/java/org/apgrp10/gwent/client/controller/UserController.java
+++ b/gwent-client/src/main/java/org/apgrp10/gwent/client/controller/UserController.java
@@ -2,6 +2,7 @@ package org.apgrp10.gwent.client.controller;
 
 
 import com.google.gson.JsonObject;
+import com.google.gson.reflect.TypeToken;
 import javafx.stage.Stage;
 import javafx.stage.Window;
 import org.apgrp10.gwent.client.Gwent;
@@ -22,10 +23,13 @@ import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Optional;
 import java.util.function.Consumer;
 
 public class UserController {
 	private static final String JWT_FILE_PATH = Gwent.APP_DATA + "jwt.txt";
+	private static final HashMap<Long, User.PublicInfo> userInfoCache = new HashMap<>();
 	private static User currentUser;
 	private static long toVerifyUser;
 	private static String jwt;
@@ -83,6 +87,8 @@ public class UserController {
 					Gwent.forEachAbstractStage(AbstractStage::connectionEstablished);
 					if (MainStage.getInstance().isWaitingForAuth()) MainStage.getInstance().start();
 					Server.setListener("continueGame", PreGameController::startGame); // set listener for continueGame
+					Server.setListener("requestPlay", PreGameController::handlePlayRequest); // set listener for playReplay
+					Server.setListener("declinePlayRequest", PreGameController::handlePlayRequestDecline); // set listener for declinePlayRequest
 				} else {
 					ANSI.log("No Acceptable JWT, going to login page", ANSI.LRED, false);
 					Gwent.forEachStage(Stage::close);
@@ -252,5 +258,88 @@ public class UserController {
 			callback.accept(res);
 		});
 	}
+
+	public static void getUserInfo(String username, boolean refresh, Consumer<User.PublicInfo> callback) {
+		Optional<User.PublicInfo> optInfo = userInfoCache.values().parallelStream()
+				.filter(info -> info.username().equals(username)).findFirst();
+		if (!refresh && optInfo.isPresent())
+			callback.accept(optInfo.get());
+		else Server.send(new Request("getUserInfo", MGson.makeJsonObject("username", username)), res -> {
+			if(res.isOk()) {
+				User.PublicInfo info = MGson.fromJson(res.getBody(), User.PublicInfo.class);
+				userInfoCache.put(info.id(), info);
+				callback.accept(info);
+			}
+			else {
+				ANSI.log("Failed to get user info, error code " + res.getStatus());
+				if (res.getStatus() == Response.INTERNAL_SERVER_ERROR)
+					ANSI.printErrorResponse(null, res);
+			}
+		});
+	}
+
+	public static void getUserInfo(long id, boolean refresh, Consumer<User.PublicInfo> callback) {
+		if (!refresh && userInfoCache.containsKey(id))
+			callback.accept(userInfoCache.get(id));
+
+		else{
+			ANSI.log("Getting user info for id " + id);
+			Server.send(new Request("getUserInfo", MGson.makeJsonObject("userId", id)), res -> {
+				if(res.isOk()) {
+					User.PublicInfo info = MGson.fromJson(res.getBody(), User.PublicInfo.class);
+					userInfoCache.put(info.id(), info);
+					callback.accept(info);
+				}
+				else {
+					ANSI.log("Failed to get user info, error code " + res.getStatus());
+					if (res.getStatus() == Response.INTERNAL_SERVER_ERROR)
+						ANSI.printErrorResponse(null, res);
+				}
+			});
+		}
+	}
+
+	public static void clearUserInfoCache() {
+		userInfoCache.clear();
+	}
+
+	public static void isUserOnline(long id, Consumer<Boolean> callback) {
+		Server.send(new Request("isUserOnline", MGson.makeJsonObject("userId", id)), res -> {
+			if(res.isOk())
+				callback.accept(res.getBody().get("online").getAsBoolean());
+			else {
+				ANSI.log("Failed to check user online status, error code " + res.getStatus());
+				if (res.getStatus() == Response.INTERNAL_SERVER_ERROR)
+					ANSI.printErrorResponse(null, res);
+			}
+		});
+	}
+
+	public static void searchUsername(String query, int limit, Consumer<ArrayList<Long>> callback) {
+		Server.send(new Request("searchUsername", MGson.makeJsonObject("query", query, "limit", limit)), res -> {
+			if(res.isOk()) {
+				ArrayList<Long> result = MGson.fromJson(res.getBody(), TypeToken.getParameterized(ArrayList.class, Long.class).getType());
+				callback.accept(result);
+			}
+			else {
+				ANSI.log("Failed to search for username, error code " + res.getStatus());
+				if (res.getStatus() == Response.INTERNAL_SERVER_ERROR)
+					ANSI.printErrorResponse(null, res);
+			}
+		});
+	}
+
+	public static void sendFriendRequest(long id, Consumer<Response> callback) {
+		Server.send(new Request("sendFriendRequest", MGson.makeJsonObject("userId", id)), res -> {
+			if(res.isOk())
+				ANSI.log("Friend request sent successfully");
+			else {
+				ANSI.log("Failed to send friend request, error code " + res.getStatus());
+				if (res.getStatus() == Response.INTERNAL_SERVER_ERROR)
+					ANSI.printErrorResponse(null, res);
+			}
+			callback.accept(res);
+		});
+	}
 //	public static void updateUser() {authenticate();}
 }
diff --git a/gwent-client/src/main/java/org/apgrp10/gwent/client/model/GameListView.java b/gwent-client/src/main/java/org/apgrp10/gwent/client/model/GameListView.java
new file mode 100644
index 0000000..2a6b05a
--- /dev/null
+++ b/gwent-client/src/main/java/org/apgrp10/gwent/client/model/GameListView.java
@@ -0,0 +1,25 @@
+package org.apgrp10.gwent.client.model;
+
+import io.github.palexdev.materialfx.controls.MFXListView;
+import javafx.collections.ObservableList;
+import javafx.scene.layout.AnchorPane;
+
+public class GameListView extends MFXListView<Long> {
+	public GameListView()
+	{
+		super();
+	}
+
+	@Override
+	public void setItems(ObservableList<Long> items) {
+		super.setItems(items);
+	}
+
+	public static class GameListItem extends AnchorPane
+	{
+		public GameListItem(long userId)
+		{
+
+		}
+	}
+}
diff --git a/gwent-client/src/main/java/org/apgrp10/gwent/client/view/FriendshipStage.java b/gwent-client/src/main/java/org/apgrp10/gwent/client/view/FriendshipStage.java
new file mode 100644
index 0000000..a4369b3
--- /dev/null
+++ b/gwent-client/src/main/java/org/apgrp10/gwent/client/view/FriendshipStage.java
@@ -0,0 +1,23 @@
+package org.apgrp10.gwent.client.view;
+
+import javafx.scene.image.Image;
+import org.apgrp10.gwent.client.R;
+
+public class FriendshipStage extends AbstractStage {
+
+	private static FriendshipStage INSTANCE;
+
+	private FriendshipStage() {
+		super("Friends", R.icon.profile);
+		if (INSTANCE != null) throw new RuntimeException("Duplicate Instance of FriendshipStage");
+	}
+
+	public static FriendshipStage getInstance() {
+		if (INSTANCE == null) INSTANCE = new FriendshipStage();
+		return INSTANCE;
+	}
+
+	protected boolean onCreate() {
+		return true;
+	}
+}
diff --git a/gwent-client/src/main/java/org/apgrp10/gwent/client/view/GameStage.java b/gwent-client/src/main/java/org/apgrp10/gwent/client/view/GameStage.java
index ba3d399..099411c 100644
--- a/gwent-client/src/main/java/org/apgrp10/gwent/client/view/GameStage.java
+++ b/gwent-client/src/main/java/org/apgrp10/gwent/client/view/GameStage.java
@@ -5,6 +5,8 @@ import java.util.*;
 import io.github.palexdev.materialfx.dialogs.MFXDialogs;
 import javafx.application.Platform;
 import javafx.geometry.Orientation;
+import javafx.stage.Stage;
+import org.apgrp10.gwent.client.Gwent;
 import org.apgrp10.gwent.client.R;
 import org.apgrp10.gwent.client.Server;
 import org.apgrp10.gwent.client.controller.MouseInputController;
@@ -101,6 +103,7 @@ public class GameStage extends AbstractStage {
 
 	private void stopServer() {
 		Server.setListener("command", null);
+		Gwent.exit();
 	}
 
 	private void createLocal() {
@@ -111,7 +114,6 @@ public class GameStage extends AbstractStage {
 		// TODO: better way to save recording
 		new GameController(c1, c2, user1, user2, deck1, deck2, seed, gm, gr -> {
 			showWinnerDialog(gr, true);
-
 			this.close();
 		}, 0, false, null);
 	}
@@ -153,11 +155,11 @@ public class GameStage extends AbstractStage {
 				return false;
 			}
 			case LOCAL -> createLocal();
-			case ONLINE -> createOnline();
-			case CONTINUE -> createOnline();
+			case ONLINE, CONTINUE -> createOnline();
 			case LIVE -> createLive();
 			case REPLAY -> createReplay();
 		}
+		Gwent.forEachStage(Stage::close);
 		return true;
 	}
 
@@ -166,25 +168,23 @@ public class GameStage extends AbstractStage {
 		event.consume();
 		if (showExitDialog()) stopServer();
 	}
+
 	private void showWinnerDialog(GameRecord gr, boolean hasSave){
 		String title;
 		if(gr.gameWinner() == -1)
 			title = "Draw!";
 		else if((gr.gameWinner() == 0 && UserController.getCurrentUser().id() == gr.player1ID()) ||
 		        (gr.gameWinner() == 1 && UserController.getCurrentUser().id() == gr.player2ID()))
-			title = "you win!";
+			title = "You won!";
 		else
-			title = "you lose!";
+			title = "You lose!";
 		StringBuilder content = new StringBuilder();
-		for(int i = 0; i < gr.p1Sc().size(); i++){
-			content.append("Round ").append(i).append(" : ").append(gr.p1Sc().get(i)).append("_").append(gr.p2Sc().get(i)).append(" / ");
-		}
-		if(content.length() > 3)
-			content = new StringBuilder(content.substring(0, content.length() - 3));
+		for(int i = 0; i < gr.p1Sc().size(); i++)
+			content.append("Round ").append(i).append(" : ").append(gr.p1Sc().get(i)).append(" - ").append(gr.p2Sc().get(i)).append("\n");
 		if(!hasSave)
-			Dialogs.showDialogAndWait(this, MFXDialogs.info(), title, content.toString(), Map.entry("#OK", k -> {}));
+			showDialogAndWait(Dialogs.INFO(), title, content.toString(), Map.entry("#OK", k -> {}));
 		else
-			Dialogs.showDialogAndWait(this, MFXDialogs.info(), title, content.toString(), Map.entry("#OK", k -> {}), Map.entry("save game", k ->
+			showDialogAndWait(Dialogs.INFO(), title, content.toString(), Map.entry("#OK", k -> {}), Map.entry("save game", k ->
 					Utils.choosePlaceAndDownload("Choose place to save recording", "recording.gwent", this,
 					MGson.get(true, true).toJson(gr))));
 	}
diff --git a/gwent-client/src/main/java/org/apgrp10/gwent/client/view/MainStage.java b/gwent-client/src/main/java/org/apgrp10/gwent/client/view/MainStage.java
index b23245f..0aaa676 100644
--- a/gwent-client/src/main/java/org/apgrp10/gwent/client/view/MainStage.java
+++ b/gwent-client/src/main/java/org/apgrp10/gwent/client/view/MainStage.java
@@ -39,6 +39,8 @@ public class MainStage extends AbstractStage {
 		MFXButton gameBtn, replayBtn, playingBtn, profileBtn, friendsBtn, rankingsBtn;
 
 		setScene(R.scene.main);
+
+		// TODO: enable these
 		if (!Server.isConnected() || UserController.getCurrentUser() == null) {
 			disable();  // Disable the buttons until the user is authenticated
 			waitingForAuth = UserController.getCurrentUser() == null;
@@ -55,7 +57,10 @@ public class MainStage extends AbstractStage {
 		friendsBtn = lookup("#friendsBtn");
 		rankingsBtn = lookup("#rankingsBtn");
 
-		setOnPressListener(gameBtn, event -> PreGameStage.getInstance().start());
+		setOnPressListener(gameBtn, event -> {
+			PreGameStage.getInstance().setupChoice();
+			PreGameStage.getInstance().start();
+		});
 
 		setOnPressListener(replayBtn, event -> {
 			//TODO: show a dialog , User specifies whether he wants to review a file record or a recording on server
diff --git a/gwent-client/src/main/java/org/apgrp10/gwent/client/view/MessageStage.java b/gwent-client/src/main/java/org/apgrp10/gwent/client/view/MessageStage.java
index 158a868..daab33d 100644
--- a/gwent-client/src/main/java/org/apgrp10/gwent/client/view/MessageStage.java
+++ b/gwent-client/src/main/java/org/apgrp10/gwent/client/view/MessageStage.java
@@ -11,7 +11,7 @@ public class MessageStage extends AbstractStage {
 
 	private MessageStage() {
 		super("chat", R.getImage("ic_chat.png"));
-		controller = ChatMenuController.cleanInstance();
+//		controller = ChatMenuController.cleanInstance();
 	}
 
 	public static MessageStage getInstance() {
diff --git a/gwent-client/src/main/java/org/apgrp10/gwent/client/view/PreGameStage.java b/gwent-client/src/main/java/org/apgrp10/gwent/client/view/PreGameStage.java
index 0518db1..1814ded 100644
--- a/gwent-client/src/main/java/org/apgrp10/gwent/client/view/PreGameStage.java
+++ b/gwent-client/src/main/java/org/apgrp10/gwent/client/view/PreGameStage.java
@@ -1,28 +1,29 @@
 package org.apgrp10.gwent.client.view;
 
-import java.util.Map;
-
+import io.github.palexdev.materialfx.dialogs.MFXDialogs;
+import javafx.application.Platform;
+import javafx.geometry.Orientation;
+import javafx.scene.Scene;
+import javafx.scene.layout.Pane;
+import javafx.stage.WindowEvent;
 import org.apgrp10.gwent.client.R;
 import org.apgrp10.gwent.client.controller.PreGameController;
 import org.apgrp10.gwent.client.controller.UserController;
 import org.apgrp10.gwent.model.Avatar;
 import org.apgrp10.gwent.model.Deck;
 import org.apgrp10.gwent.model.User;
+import org.apgrp10.gwent.model.net.Response;
 import org.apgrp10.gwent.utils.ANSI;
 import org.apgrp10.gwent.utils.WaitExec;
 
-import io.github.palexdev.materialfx.dialogs.MFXDialogs;
-import javafx.application.Platform;
-import javafx.geometry.Orientation;
-import javafx.scene.Scene;
-import javafx.scene.layout.Pane;
-import javafx.stage.WindowEvent;
+import java.util.Map;
 
 public class PreGameStage extends AbstractStage {
 	private static PreGameStage INSTANCE;
 	private Pane pane;
-	private Deck deck1, deck2;
+	private Deck lastDeck;
 	private GameMode gameMode = GameMode.CHOICE;
+	private boolean isPublic = false;
 
 	private PreGameStage() {
 		super("PreGame Menu", R.icon.app_icon);
@@ -38,8 +39,9 @@ public class PreGameStage extends AbstractStage {
 		gameMode = GameMode.CHOICE;
 	}
 
-	public void setupFriendMode() {
+	public void setupFriendMode(boolean isPublic) {
 		gameMode = GameMode.FRIEND;
+		this.isPublic = isPublic;
 	}
 
 	@Override
@@ -63,27 +65,27 @@ public class PreGameStage extends AbstractStage {
 	public void startClicked(Deck deck) {
 		switch (gameMode) {
 			case CHOICE -> {
-				deck1 = deck;
+				lastDeck = deck;
 				Dialogs.showDialogAndWait(this, MFXDialogs.warn(), "choose", "How you want to play?\n", Orientation.VERTICAL,
 						Map.entry("Make an Offline play", e -> {
 							gameMode = GameMode.LOCAL;
-							new PreGameMenu(pane, false, UserController.getCurrentUser().publicInfo());
+							new PreGameMenu(pane, false, new User.PublicInfo(0, "anonymous", "anonymous", Avatar.random()));
 						}),
 						Map.entry("Make an online play with a friend", e -> {
-							// TODO: choose a friend, send a request (contains deck) to server, and wait for response
+							// choose a friend, send a request (contains deck) to server, and wait for response
+							Platform.runLater(this::chooseFriendForPlaying);
 						}),
 						Map.entry("Make an online play with a random user", e -> {
 							// send a request of random play to server (contains deck) and wait for response
-							Platform.runLater(this::randomPlayingRequest);
+							Platform.runLater(() -> requestForPlay(-1, "a random user"));
 						}));
 			}
 			case LOCAL -> {
-				deck2 = deck;
 				GameStage.setCommonData(
 						UserController.getCurrentUser().publicInfo(),
 						new User.PublicInfo(0, "anonymous", "anonymous", Avatar.random()),
-						deck1,
-						deck2,
+						lastDeck,
+						deck,
 						System.currentTimeMillis()
 				);
 				GameStage.setLocal();
@@ -91,29 +93,60 @@ public class PreGameStage extends AbstractStage {
 				this.close();
 			}
 			case FRIEND -> {
+				// RequestPlay with our own id means accepting the friend playRequest
+				PreGameController.requestPlay(deck, UserController.getCurrentUser().id(), isPublic, res -> {
+					if (!res.isOk()) {
+						ANSI.log("Failed to start game: " + res.getStatus());
+						if (res.getStatus() == Response.NOT_FOUND)
+							showAlert(Dialogs.ERROR(), "Failed to start game", "Your friend is offline, or possibly canceled the request.");
+						else
+							showAlert(Dialogs.ERROR(), "Failed to start game", "Failed to start game with friend");
+					}
 
+				});
 			}
 		}
 	}
 
-	private void randomPlayingRequest() {
-		PreGameController.randomPlayRequest(deck1, res -> {
+	private void chooseFriendForPlaying() {
+		// TODO: show a dialog listing and searching friends and send a request to the selected friend
+
+
+		long testTarget = 4491737055656897591L;
+		requestForPlay(testTarget, "'online2'");
+	}
+
+	private void requestForPlay(long target, String showingName) {
+		isPublic = target == -1 ||
+		           showConfirmDialog(Dialogs.INFO(), "Make Game Public", "Do you want to make this game public?", "Yes", "No");
+
+		PreGameController.requestPlay(lastDeck, target, isPublic, res -> {
 			if (res.isOk()) {
 				Platform.runLater(() -> {
-					WaitExec waitForRandomDialogLoop = new WaitExec(false);
-					waitForRandomDialogLoop.run(100, new Runnable() {
+					WaitExec waitForPlayDialogLoop = new WaitExec(false);
+					waitForPlayDialogLoop.run(100, new Runnable() {
 						@Override
 						public void run() {
-							if (!PreGameController.isWaitingForOpponent()) return;
-							showDialogAndWait(Dialogs.INFO(), "Waiting for opponent", "Waiting for a random opponent to join the game ...",
-									Map.entry("Cancel", e -> PreGameController.cancelRandomPlayRequest()));
-							waitForRandomDialogLoop.run(500, this);
+							int state = PreGameController.getLastRequestState();
+							if (state == PreGameController.WAITING) {
+								showDialogAndWait(Dialogs.INFO(), "Waiting for opponent", "Waiting for " + showingName + " to join the game ...",
+										Map.entry("Cancel", e -> PreGameController.cancelPlayRequest()));
+								waitForPlayDialogLoop.run(500, this);
+							} else if (state == PreGameController.CANCELED)
+								showAlert(Dialogs.INFO(), "Play Request Canceled", "Your play request has been canceled.");
+							else if (state == PreGameController.DECLINED)
+								showAlert(Dialogs.WARN(), "Play Request Declined", showingName + " declined your play request!");
 						}
 					});
 				});
 			} else {
 				ANSI.log("Failed to start game: " + res.getStatus());
-				showAlert(Dialogs.ERROR(), "Failed to start game", "Failed to start game with random opponent");
+				if (res.getStatus() == Response.NOT_FOUND)
+					showAlert(Dialogs.ERROR(), "Failed to start game", "Your friend is offline.");
+				else if (res.getStatus() == Response.CONFLICT)
+					showAlert(Dialogs.ERROR(), "Failed to start game", "Your friend is already has a play request, or is in a game.");
+				else
+					showAlert(Dialogs.ERROR(), "Failed to start game", "Failed to start game with friend");
 			}
 		});
 	}
diff --git a/gwent-client/src/main/java/org/apgrp10/gwent/client/view/ScoreboardStage.java b/gwent-client/src/main/java/org/apgrp10/gwent/client/view/ScoreboardStage.java
new file mode 100644
index 0000000..0113581
--- /dev/null
+++ b/gwent-client/src/main/java/org/apgrp10/gwent/client/view/ScoreboardStage.java
@@ -0,0 +1,23 @@
+package org.apgrp10.gwent.client.view;
+
+import org.apgrp10.gwent.client.R;
+
+public class ScoreboardStage extends AbstractStage{
+	private static ScoreboardStage INSTANCE;
+
+	private ScoreboardStage() {
+		//TODO: setIcon
+		super("Scoreboard", R.icon.app_icon);
+		if (INSTANCE != null) throw new RuntimeException("Duplicate Instance of ScoreboardStage");
+	}
+
+	public static ScoreboardStage getInstance() {
+		if (INSTANCE == null) INSTANCE = new ScoreboardStage();
+		return INSTANCE;
+	}
+
+	@Override
+	protected boolean onCreate() {
+		return true;
+	}
+}
diff --git a/gwent-client/src/main/resources/org/apgrp10/gwent/client/css/score.css b/gwent-client/src/main/resources/org/apgrp10/gwent/client/css/score.css
new file mode 100644
index 0000000..e349c9e
--- /dev/null
+++ b/gwent-client/src/main/resources/org/apgrp10/gwent/client/css/score.css
@@ -0,0 +1,55 @@
+@import "styles.css";
+
+.frame {
+    -fx-background-color: #FFFFFF80;
+    -fx-border-color: #80420f;
+    -fx-border-radius: 10px;
+    -fx-border-width: 5px;
+    -fx-background-radius: 10px;
+}
+
+Label {
+    -fx-background-radius: 15px;
+    -fx-background-color: rgba(221, 151, 116, 0.66);
+}
+
+.mfx-table-view {
+    -fx-background-color: #FFFFFF60;
+    -fx-background-radius: 10px;
+}
+
+.mfx-table-column {
+    -fx-font-family: "Visby Round CF Bold";
+    -fx-font-size: 19px;
+    -fx-background-color: rgba(137, 50, 231, 0.62);
+    -fx-text-fill: #000000;
+    -fx-border-color: #22222280;
+}
+
+.mfx-table-row-cell {
+    -fx-border-color: #22222280;
+}
+
+.mfx-table-row:selected {
+    -fx-background-color: rgba(135, 65, 210, 0.67);
+}
+
+.mfx-table-row:hover {
+    -fx-background-color: rgba(137, 50, 231, 0.31);
+}
+
+.mfx-table-row.rank-row {
+    -fx-background-color: rgba(242, 177, 0, 0.62);
+}
+
+.mfx-table-row.rank-row:hover {
+    -fx-background-color: rgba(242, 177, 0, 0.31);
+}
+
+.mfx-table-row.current-user-row {
+    -fx-background-color: rgba(0, 141, 242, 0.62);
+}
+
+.mfx-table-row.current-user-row:hover {
+    -fx-background-color: rgba(0, 141, 242, 0.31);
+}
\ No newline at end of file
diff --git a/gwent-client/src/main/resources/org/apgrp10/gwent/client/fxml/scoreboard.fxml b/gwent-client/src/main/resources/org/apgrp10/gwent/client/fxml/scoreboard.fxml
new file mode 100644
index 0000000..4fa9281
--- /dev/null
+++ b/gwent-client/src/main/resources/org/apgrp10/gwent/client/fxml/scoreboard.fxml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import io.github.palexdev.materialfx.controls.MFXTableView?>
+<?import javafx.geometry.Insets?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.image.Image?>
+<?import javafx.scene.image.ImageView?>
+<?import javafx.scene.layout.*?>
+<?import javafx.scene.Scene?>
+
+<Scene stylesheets="@../css/score.css" xmlns="http://javafx.com/javafx/21.0.1" xmlns:fx="http://javafx.com/fxml/1">
+    <AnchorPane maxHeight="520.0" maxWidth="700">
+        <ImageView fitHeight="520.0" fitWidth="700.0" pickOnBounds="true">
+            <Image url="@../image/scores_bkg.png"/>
+        </ImageView>
+        <VBox alignment="CENTER" styleClass="frame" AnchorPane.bottomAnchor="10" AnchorPane.leftAnchor="10"
+              AnchorPane.rightAnchor="10"
+              AnchorPane.topAnchor="10">
+            <Label styleClass="header" text=" Top 10 Users scores "/>
+            <MFXTableView fx:id="scoreTable" footerVisible="false" maxWidth="-Infinity" minHeight="-Infinity"
+                          minWidth="-Infinity"
+                          prefHeight="410.0" prefWidth="630.0">
+                <VBox.margin>
+                    <Insets top="10.0"/>
+                </VBox.margin>
+            </MFXTableView>
+        </VBox>
+    </AnchorPane>
+</Scene>
diff --git a/gwent-client/src/main/resources/org/apgrp10/gwent/client/image/chat_bkg.png b/gwent-client/src/main/resources/org/apgrp10/gwent/client/image/chat_bkg.png
index 906e329..4c8b9a8 100644
Binary files a/gwent-client/src/main/resources/org/apgrp10/gwent/client/image/chat_bkg.png and b/gwent-client/src/main/resources/org/apgrp10/gwent/client/image/chat_bkg.png differ
diff --git a/gwent-client/src/main/resources/org/apgrp10/gwent/client/image/ic_chat.png b/gwent-client/src/main/resources/org/apgrp10/gwent/client/image/ic_chat.png
index ba58c77..b157dfc 100644
Binary files a/gwent-client/src/main/resources/org/apgrp10/gwent/client/image/ic_chat.png and b/gwent-client/src/main/resources/org/apgrp10/gwent/client/image/ic_chat.png differ
diff --git a/gwent-client/src/main/resources/org/apgrp10/gwent/client/image/ic_login.png b/gwent-client/src/main/resources/org/apgrp10/gwent/client/image/ic_login.png
index a9d611f..4d8af16 100644
Binary files a/gwent-client/src/main/resources/org/apgrp10/gwent/client/image/ic_login.png and b/gwent-client/src/main/resources/org/apgrp10/gwent/client/image/ic_login.png differ
diff --git a/gwent-client/src/test/java/org/apgrp10/gwent/client/PreGameMenuTest.java b/gwent-client/src/test/java/org/apgrp10/gwent/client/PreGameMenuTest.java
deleted file mode 100644
index 8c370d1..0000000
--- a/gwent-client/src/test/java/org/apgrp10/gwent/client/PreGameMenuTest.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package org.apgrp10.gwent.client;
-
-import org.apgrp10.gwent.client.controller.PreGameController;
-import org.apgrp10.gwent.model.Deck;
-import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.Test;
-
-import java.util.Objects;
-
-public class PreGameMenuTest {
-	@Test
-	public void canclePlaying(){
-		PreGameController.randomPlayRequest(Objects.requireNonNull(Deck.loadDeckFromFile(R.getAbsPath("primaryDeck.gwent"))),
-				null);
-		PreGameController.cancelRandomPlayRequest();
-		Assertions.assertFalse(PreGameController.isWaitingForOpponent());
-	}
-}
diff --git a/gwent-common/src/main/java/org/apgrp10/gwent/controller/GameController.java b/gwent-common/src/main/java/org/apgrp10/gwent/controller/GameController.java
index 4d9ac36..3e3b556 100644
--- a/gwent-common/src/main/java/org/apgrp10/gwent/controller/GameController.java
+++ b/gwent-common/src/main/java/org/apgrp10/gwent/controller/GameController.java
@@ -1,5 +1,6 @@
 package org.apgrp10.gwent.controller;
 
+import org.apgrp10.gwent.utils.ANSI;
 import org.apgrp10.gwent.utils.WaitExec;
 import org.apgrp10.gwent.view.GameMenuInterface;
 import org.apgrp10.gwent.model.Command;
@@ -183,7 +184,7 @@ public class GameController {
 
 		if (currentRound >= 3) {
 			for (int p = 0; p < 2; p++) {
-				Faction f = p == 1? playerData[1].deck.getFaction(): playerData[0].deck.getFaction();
+				Faction f = p == 1 ? playerData[1].deck.getFaction() : playerData[0].deck.getFaction();
 				if (f != Faction.SKELLIGE)
 					continue;
 				for (int i = 0; i < 2; i++) {
@@ -803,7 +804,8 @@ public class GameController {
 	private List<Command> cmdHistory = new ArrayList<>();
 
 	public void sendCommand(Command cmd) {
-		System.out.println(cmd);
+		ANSI.log("Received command: " + cmd.toString() + " At game between" +
+		         playerData[0].user.username() + " and " + playerData[1].user.username());
 
 		if (cmd instanceof Command.Informational) {
 			if (cmd instanceof Command.Connection) connection((Command.Connection)cmd);
diff --git a/gwent-common/src/main/java/org/apgrp10/gwent/model/Experience.java b/gwent-common/src/main/java/org/apgrp10/gwent/model/Experience.java
deleted file mode 100644
index 93afca2..0000000
--- a/gwent-common/src/main/java/org/apgrp10/gwent/model/Experience.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package org.apgrp10.gwent.model;
-
-public record Experience(long userId,
-                         GameRecord bestPlaying,
-                         int wins,
-                         int losses,
-                         int draws){}
\ No newline at end of file
diff --git a/gwent-common/src/main/java/org/apgrp10/gwent/model/UserExperience.java b/gwent-common/src/main/java/org/apgrp10/gwent/model/UserExperience.java
new file mode 100644
index 0000000..6f0c72b
--- /dev/null
+++ b/gwent-common/src/main/java/org/apgrp10/gwent/model/UserExperience.java
@@ -0,0 +1,7 @@
+package org.apgrp10.gwent.model;
+
+public record UserExperience(long userId,
+                             int maxScore,
+                             int wins,
+                             int losses,
+                             int draws){}
\ No newline at end of file
diff --git a/gwent-common/src/main/resources/org/apgrp10/gwent/samplegame1.gwent b/gwent-common/src/test/resources/org.apgrp10.gwent/samplegame1.gwent
similarity index 100%
rename from gwent-common/src/main/resources/org/apgrp10/gwent/samplegame1.gwent
rename to gwent-common/src/test/resources/org.apgrp10.gwent/samplegame1.gwent
diff --git a/gwent-common/src/main/resources/org/apgrp10/gwent/samplegame2.gwent b/gwent-common/src/test/resources/org.apgrp10.gwent/samplegame2.gwent
similarity index 100%
rename from gwent-common/src/main/resources/org/apgrp10/gwent/samplegame2.gwent
rename to gwent-common/src/test/resources/org.apgrp10.gwent/samplegame2.gwent
diff --git a/gwent-server/src/main/java/org/apgrp10/gwent/server/GameTask.java b/gwent-server/src/main/java/org/apgrp10/gwent/server/GameTask.java
index 8b8ee9e..568caeb 100644
--- a/gwent-server/src/main/java/org/apgrp10/gwent/server/GameTask.java
+++ b/gwent-server/src/main/java/org/apgrp10/gwent/server/GameTask.java
@@ -58,7 +58,8 @@ public class GameTask extends Task {
 				gr -> {
 					done = true;
 					removeAllListeners();
-					ANSI.log("game record: " + gr);
+					ANSI.log("Game Finished between " + data[0].user.username() + " and " + data[1].user.username());
+					ANSI.log("Winner : " + gr.gameWinner());
 					onEnd.accept(gr);
 				},
 				0,
@@ -169,6 +170,7 @@ public class GameTask extends Task {
 				if (continueWaitingResponse[i] == null) {
 					Client c = Client.clientOfUser(d.user);
 					if (c != null) {
+						ANSI.log("user connected " + d.user.username());
 						continueWaitingResponse[i] = c;
 						c.send(startingRequest("continueGame", true, false), res -> {
 							if (res.isOk()) {
@@ -180,6 +182,9 @@ public class GameTask extends Task {
 								c.setListener("command", this::handleCommand);
 								c.setListener("chatMessage", req -> handleMessage(req, false));
 							}
+							else {
+								ANSI.log("request Rejected : " + res);
+							}
 						});
 					}
 				} else if (continueWaitingResponse[i].isDone()) {
diff --git a/gwent-server/src/main/java/org/apgrp10/gwent/server/GamesManager.java b/gwent-server/src/main/java/org/apgrp10/gwent/server/GamesManager.java
index d1bd1de..cb1e3e8 100644
--- a/gwent-server/src/main/java/org/apgrp10/gwent/server/GamesManager.java
+++ b/gwent-server/src/main/java/org/apgrp10/gwent/server/GamesManager.java
@@ -1,97 +1,125 @@
 package org.apgrp10.gwent.server;
 
+import javafx.util.Pair;
 import org.apgrp10.gwent.model.Command;
 import org.apgrp10.gwent.model.Deck;
 import org.apgrp10.gwent.model.GameRecord;
+import org.apgrp10.gwent.model.net.Request;
+import org.apgrp10.gwent.model.net.Response;
 import org.apgrp10.gwent.utils.ANSI;
 import org.apgrp10.gwent.utils.DatabaseTable;
+import org.apgrp10.gwent.utils.MGson;
 
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.stream.Collectors;
 
 public class GamesManager {
-
-	private static final HashMap<Long, GameTask> games = new HashMap<>();
-	private static final List<Client> waitingForFriend = new ArrayList<>();
-	private static Client waitingForRandom;
-	private static Deck waitingForRandomDeck;
+	private static final ArrayList<CurrentGame> games = new ArrayList<>();
+	private static final Map<Long, Pair<Client, Deck>> waitingForPlaying = new ConcurrentHashMap<>();
+	private static final SavedGames database;
+
+	static {
+		try {
+			database = new SavedGames();
+		} catch (Exception e) {
+			ANSI.log("Error creating SavedGames database: " + e.getMessage());
+			throw new RuntimeException(e);
+		}
+	}
 
 	private GamesManager() {}
 
-	public static synchronized void randomPlayRequest(Client client, Deck deck) throws Exception {
-		// first check if client is not in a game
-		if (games.containsKey(client.loggedInUser().id()))
-			throw new IllegalStateException("You are already in a game");
-
-		// if no waiting user or waiting user disconnected
-		if (waitingForRandom == null || waitingForRandom.isDone()) {
-			waitingForRandom = client;
-			waitingForRandomDeck = deck;
-		} else {
-			GameTask newGame = new GameTask(waitingForRandom, client, waitingForRandomDeck, deck, gameRecord -> {
-				games.remove(gameRecord.player1ID());
-				games.remove(gameRecord.player2ID());
-			});
-			games.put(waitingForRandom.loggedInUser().id(), newGame);
-			games.put(client.loggedInUser().id(), newGame);
-			TaskManager.submit(newGame);
-			waitingForRandom = null;
-			waitingForRandomDeck = null;
+	/**
+	 * @param client:   the client who wants to play
+	 * @param deck:     the deck that the client wants to play with
+	 * @param target:   the target client that the client wants to play with (-1 for random play)
+	 * @param isPublic: whether the game should be public or not
+	 * @return errorCode:
+	 * -OK (200): OK
+	 * -BAD_REQUEST (400): Client is already in a game
+	 * -CONFLICT (409): The target is already requested, or in a game
+	 * -NOT_FOUND (404): The target is offline (or non-existing)
+	 */
+	public static synchronized int requestPlay(Client client, Deck deck, long target, boolean isPublic) {
+		// First, check if client is not already in a game
+		if (games.stream().anyMatch(g -> g.p1() == client.loggedInUser().id() || g.p2() == client.loggedInUser().id()))
+			return Response.BAD_REQUEST;
+
+		var waiting = waitingForPlaying.get(target);  // target -1 means Random Play
+
+		// if anyone is waiting for that place
+		if (waiting != null && !waiting.getKey().isDone()) {
+			// if we can join (the place belongs us , or public random place)
+			if (target == client.loggedInUser().id() || target == -1) {
+				// client can be joined with waiting client
+				GameTask newGame = new GameTask(waiting.getKey(), client, waiting.getValue(), deck, gameRecord -> {
+					games.removeIf(g -> g.p1() == gameRecord.player1ID() && g.p2() == gameRecord.player2ID());
+					try {
+						database.addGame(gameRecord, isPublic);
+					} catch (Exception e) {
+						ANSI.log("Error saving game to database: " + e.getMessage());
+					}
+				});
+				games.add(new CurrentGame(waiting.getKey().loggedInUser().id(), client.loggedInUser().id(), isPublic, newGame));
+
+				// remove the waiting client
+				waitingForPlaying.remove(target);
+			} else { // we cannot join ( a user already requested the target for playing)
+				return Response.CONFLICT;
+			}
 		}
+		// Nobody is waiting for that place
+		else {
+			if (target != client.loggedInUser().id() && UserManager.isUserOnline(target)) {
+				// check the target if is already in a game
+				if (games.stream().anyMatch(g -> g.p1() == target || g.p2() == target))
+					return Response.CONFLICT;
+				Client.clientOfUser(target).send(new Request("requestPlay", MGson.makeJsonObject("from", client.loggedInUser().id(), "isPublic", isPublic)));
+			} else if (target != -1)
+				return Response.NOT_FOUND;  // requesting to an offline (or non-existing) User!
+			waitingForPlaying.put(target, new Pair<>(client, deck));
+		}
+		return Response.OK;
 	}
 
-	public static synchronized void cancelRandomPlayRequest(Client client) {
-		if (waitingForRandom == client) {
-			waitingForRandom = null;
-			waitingForRandomDeck = null;
-		}
+	public static synchronized void cancelPlayRequest(Client client) {
+		waitingForPlaying.entrySet().removeIf(e -> e.getValue().getKey() == client);
 	}
 
-	// salam
-	public static class SavedGames extends DatabaseTable {
-		private static final String tableName = "games";
-		private static SavedGames instance;
+	public static void declinePlayRequest(Client client) {
+		var waiter = waitingForPlaying.remove(client.loggedInUser().id());
+		if(waiter != null && waiter.getKey() != null && !waiter.getKey().isDone())
+			waiter.getKey().send(new Request("declinePlayRequest"));
+	}
 
-		private SavedGames() throws Exception {
-			super(ServerMain.SERVER_FOLDER + "gwent.db", tableName, System::currentTimeMillis, GameDBColumn.values());
-		}
+	public record CurrentGame(long p1, long p2, boolean isPublic, GameTask game) {}
 
-		public synchronized static SavedGames getInstance() {
-			if (instance == null) {
-				try {
-					instance = new SavedGames();
-				} catch (Exception e) {
-					ANSI.logError(System.err, "Failed to create GamesDatabase instance", e);
-					return null;
-				}
-			}
-			return instance;
+	private static class SavedGames extends DatabaseTable {
+
+		private SavedGames() throws Exception {
+			super(ServerMain.SERVER_FOLDER + "games.db", "games", System::currentTimeMillis, GameDBColumn.values());
+			if (database != null)
+				throw new IllegalStateException("UserDatabase already exists");
 		}
 
-		public synchronized GameRecord addGame(boolean isPublic, long player1ID, long player2ID, long seed, Deck deck1, Deck deck2, List<Command> commands,
-		                                       int gameWinner, List<Integer> roundWinner, List<Integer> p1Sc, List<Integer> p2Sc) throws Exception {
+		private synchronized void addGame(GameRecord gameRecord, boolean isPublic) throws Exception {
 			insert(
 					Map.entry(GameDBColumn.isPublic, isPublic),
-					Map.entry(GameDBColumn.player1, player1ID),
-					Map.entry(GameDBColumn.player2, player2ID),
-					Map.entry(GameDBColumn.seed, seed),
-					Map.entry(GameDBColumn.deck1, deck1),
-					Map.entry(GameDBColumn.deck2, deck2),
-					Map.entry(GameDBColumn.commands, listToString(commands, Command::toBase64)),
-					Map.entry(GameDBColumn.gameWinner, gameWinner),
-					Map.entry(GameDBColumn.roundWinner, listToString(roundWinner, String::valueOf)),
-					Map.entry(GameDBColumn.p1Sc, listToString(p1Sc, String::valueOf)),
-					Map.entry(GameDBColumn.p2Sc, listToString(p2Sc, String::valueOf))
+					Map.entry(GameDBColumn.player1, gameRecord.player1ID()),
+					Map.entry(GameDBColumn.player2, gameRecord.player2ID()),
+					Map.entry(GameDBColumn.seed, gameRecord.seed()),
+					Map.entry(GameDBColumn.deck1, gameRecord.deck1()),
+					Map.entry(GameDBColumn.deck2, gameRecord.deck2()),
+					Map.entry(GameDBColumn.commands, listToString(gameRecord.commands(), Command::toBase64)),
+					Map.entry(GameDBColumn.gameWinner, gameRecord.gameWinner()),
+					Map.entry(GameDBColumn.roundWinner, listToString(gameRecord.roundWinner(), String::valueOf)),
+					Map.entry(GameDBColumn.p1Sc, listToString(gameRecord.p1Sc(), String::valueOf)),
+					Map.entry(GameDBColumn.p2Sc, listToString(gameRecord.p2Sc(), String::valueOf))
 			);
-			return new GameRecord(player1ID, player2ID, seed, deck1.toJsonString(), deck2.toJsonString(),
-					new ArrayList<>(commands), gameWinner, new ArrayList<>(roundWinner),
-					new ArrayList<>(p1Sc), new ArrayList<>(p2Sc));
 		}
 
-		public synchronized GameRecord getGameById(long id) throws Exception {
+		private synchronized GameRecord getGameById(long id) throws Exception {
 			if (!isIdTaken(id))
 				throw new IllegalArgumentException("Game with id " + id + " does not exist");
 			return new GameRecord(getValue(id, GameDBColumn.player1),
@@ -106,37 +134,24 @@ public class GamesManager {
 					stringToList(getValue(id, GameDBColumn.p2Sc), Integer::parseInt));
 		}
 
-		public synchronized void updateGame(long id, boolean isPublic, GameRecord game) throws Exception {
-			update(id, Map.entry(GameDBColumn.isPublic, isPublic),
-					Map.entry(GameDBColumn.player1, game.player1ID()),
-					Map.entry(GameDBColumn.player2, game.player2ID()),
-					Map.entry(GameDBColumn.seed, game.seed()),
-					Map.entry(GameDBColumn.deck1, Deck.fromJsonString(game.deck1()).toBase64()),
-					Map.entry(GameDBColumn.deck2, Deck.fromJsonString(game.deck2()).toBase64()),
-					Map.entry(GameDBColumn.commands, listToString(game.commands(), Command::toBase64)),
-					Map.entry(GameDBColumn.gameWinner, game.gameWinner()),
-					Map.entry(GameDBColumn.roundWinner, listToString(game.roundWinner(), String::valueOf)),
-					Map.entry(GameDBColumn.p1Sc, listToString(game.p1Sc(), String::valueOf)),
-					Map.entry(GameDBColumn.p2Sc, listToString(game.p2Sc(), String::valueOf)));
-		}
-
-		public synchronized List<GameRecord> allGamesByPlayer(long playerId) {
-			return getAllIds().stream().filter(id -> {
-				try {
-					return getValue(id, GameDBColumn.player1).equals(playerId) || getValue(id, GameDBColumn.player2).equals(playerId);
-				} catch (Exception e) {
-					return false;
-				}
-			}).map(id -> {
-				try {
-					return getGameById(id);
-				} catch (Exception e) {
-					return null;
-				}
-			}).collect(Collectors.toList());
+		private synchronized List<GameRecord> allGamesByPlayer(long playerId) {
+//			return getAllIds().stream().filter(id -> {
+//				try {
+//					return getValue(id, GameDBColumn.player1).equals(playerId) || getValue(id, GameDBColumn.player2).equals(playerId);
+//				} catch (Exception e) {
+//					return false;
+//				}
+//			}).map(id -> {
+//				try {
+//					return getGameById(id);
+//				} catch (Exception e) {
+//					return null;
+//				}
+//			}).collect(Collectors.toList());
+			return null;
 		}
 
-		public synchronized List<GameRecord> getLastGames(int n) {
+		private synchronized List<GameRecord> getLastGames(int n) {
 			// if n is -1, return all games
 			// because id is incremented, the last n games are the last n ids
 			return getAllIds().stream().sorted().limit(n).map(id -> {
@@ -148,7 +163,7 @@ public class GamesManager {
 			}).collect(Collectors.toList());
 		}
 
-		public enum GameDBColumn implements DBColumn {
+		private enum GameDBColumn implements DBColumn {
 			isPublic("BIT"),
 			player1("BIGINT"),
 			player2("BIGINT"),
@@ -156,7 +171,7 @@ public class GamesManager {
 			deck1("TEXT"),
 			deck2("TEXT"),
 			commands("TEXT"),
-			gameWinner("INT"),
+			gameWinner("INTEGER"),
 			roundWinner("TEXT"),
 			p1Sc("TEXT"),
 			p2Sc("TEXT");
diff --git a/gwent-server/src/main/java/org/apgrp10/gwent/server/Requests.java b/gwent-server/src/main/java/org/apgrp10/gwent/server/Requests.java
index f7d4875..8efd282 100644
--- a/gwent-server/src/main/java/org/apgrp10/gwent/server/Requests.java
+++ b/gwent-server/src/main/java/org/apgrp10/gwent/server/Requests.java
@@ -3,7 +3,6 @@ package org.apgrp10.gwent.server;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import org.apgrp10.gwent.model.Deck;
-import org.apgrp10.gwent.model.GameRecord;
 import org.apgrp10.gwent.model.User;
 import org.apgrp10.gwent.model.net.Request;
 import org.apgrp10.gwent.model.net.Response;
@@ -40,7 +39,7 @@ public class Requests {
 		if (payload != null && payload.get("exp").getAsLong() > System.currentTimeMillis()) try {
 			// Return user object
 			User user = UserManager.getUserById(payload.get("sub").getAsLong());
-			if(Client.clientOfUser(user) != null)
+			if (Client.clientOfUser(user) != null)
 				Client.clientOfUser(user).setLoggedInUser(null);
 			client.setLoggedInUser(user);
 			return req.response(Response.ACCEPTED, (JsonObject) MGson.toJsonElement(user));
@@ -264,12 +263,12 @@ public class Requests {
 	 * Handles the 'getUserInfo' request. Returns the public information of the user.
 	 *
 	 * @jsonParam userId:long : The user ID || username:String : The username of the user
-	 * @statusCode 200 - OK -> body:{info:User.PublicInfo, online:boolean, best:GameRecord}
+	 * @statusCode 200 - OK -> body:User.PublicInfo
 	 * @statusCode 404 - Not Found (User not found)
 	 * @Authorizations LOGGED_IN - Only clients that are logged in can perform this request
 	 */
 	@Authorizations(LOGGED_IN)
-	public static Response getUserInfo(Client client, Request req) throws Exception {
+	public static Response getUserInfo(Client client, Request req) {
 		JsonElement userIdElement = req.getBody().get("userId");
 		JsonElement usernameElement = req.getBody().get("username");
 		User user;
@@ -285,17 +284,24 @@ public class Requests {
 		} catch (Exception e) {
 			return req.response(Response.NOT_FOUND);
 		}
-
-		JsonObject body = MGson.makeJsonObject(
-				"info", user.publicInfo(),
-				"online", UserManager.isUserOnline(user.id()),
-				"best", getBestGameRecord(user.id()));
-		return req.response(Response.OK, body);
+		if (user == null) return req.response(Response.NOT_FOUND);
+		return req.response(Response.OK, (JsonObject) MGson.toJsonElement(user.publicInfo()));
 	}
 
-	// TODO: implement and move to a better place (GamesManager)
-	private static GameRecord getBestGameRecord(long id) {
-		return null;
+	/**
+	 * Handles the 'isUserOnline' request. Returns whether the user is online.
+	 *
+	 * @jsonParam userId (long) : The user ID
+	 * @statusCode 200 - OK -> body:{"online":boolean} : Whether the user is online
+	 * @statusCode 404 - Not Found (User not found)
+	 * @Authorizations LOGGED_IN - Only clients that are logged in can perform this request
+	 */
+	@Authorizations(LOGGED_IN)
+	public static Response isUserOnline(Client client, Request req) {
+		long userId = req.getBody().get("userId").getAsLong();
+		if (!UserManager.isIdExist(userId))
+			return req.response(Response.NOT_FOUND);
+		return req.response(Response.OK, MGson.makeJsonObject("online", UserManager.isUserOnline(userId)));
 	}
 
 	/**
@@ -311,20 +317,74 @@ public class Requests {
 		String query = req.getBody().get("query").getAsString();
 		int limit = req.getBody().get("limit").getAsInt();
 		List<User> result = UserManager.searchUsername(query, limit);
-		List<User.PublicInfo> responseResult = result.stream().map(User::publicInfo).collect(Collectors.toList());
+		List<Long> responseResult = result.stream().map(User::id).collect(Collectors.toList());
 		return req.response(Response.OK, (JsonObject) MGson.toJsonElement(responseResult));
 	}
 
 	@Authorizations(LOGGED_IN)
-	public static Response randomPlayRequest(Client client, Request req) throws Exception {
+	public static Response getUserExperience(Client client, Request req) {
+		long userId = req.getBody().get("userId").getAsLong();
+
+//		return req.response(Response.OK, MGson.toJsonElement(GamesManager.getUserExperience(userId)));
+		return null;
+	}
+
+	@Authorizations(LOGGED_IN)
+	public static Response getTopUsers(Client client, Request req) {
+		int count = req.getBody().get("count").getAsInt();
+		boolean sortByMaxScore = req.getBody().get("sortByMaxScore").getAsBoolean(); // false: sort by wins
+//		List<UserExperience> scoreboard = GamesManager.getScoreboard(count, sortByMaxScore);
+//		return req.response(Response.OK, (JsonObject) MGson.toJsonElement(scoreboard));
+		return null;
+	}
+
+	@Authorizations(LOGGED_IN)
+	public static Response getCurrentGames(Client client, Request req) {
+//		return req.response(Response.OK, MGson.toJsonElement(GamesManager.getCurrentGames()));
+		return null;
+	}
+
+	/**
+	 * Handles the 'requestPlay' request. Requests to play a game.
+	 *
+	 * @jsonParam deck (Deck) : The deck to play with
+	 * @jsonParam target (long) : The target user ID (-1 for random play)
+	 * @jsonParam isPublic (boolean) : Whether the game should be public
+	 * @statusCode 200 - OK
+	 * @statusCode 400 - Bad Request (Client is already in a game)
+	 * @statusCode 404 - Not Found (The target is offline or non-existing)
+	 * @statusCode 409 - Conflict (The target is already requested or in a game)
+	 * @Authorizations LOGGED_IN - Only clients that are logged in can perform this request
+	 */
+	@Authorizations(LOGGED_IN)
+	public static Response requestPlay(Client client, Request req) {
 		Deck deck = Deck.fromJson(req.getBody().get("deck"));
-		GamesManager.randomPlayRequest(client, deck);
+		long target = req.getBody().get("target").getAsLong();
+		boolean isPublic = req.getBody().get("isPublic").getAsBoolean();
+		return req.response(GamesManager.requestPlay(client, deck, target, isPublic));
+	}
+
+	/**
+	 * Handles the 'cancelPlayRequest' request. Cancels the 'requestPlay' already sent from client
+	 *
+	 * @statusCode 204 - No Content (Play request cancelled)
+	 * @Authorizations LOGGED_IN - Only clients that are logged in can perform this request
+	 */
+	@Authorizations(LOGGED_IN)
+	public static Response cancelPlayRequest(Client client, Request req) {
+		GamesManager.cancelPlayRequest(client);
 		return req.response(Response.OK_NO_CONTENT);
 	}
 
+	/**
+	 * Handles the 'declinePlayRequest' request. Declines the 'requestPlay' from another client
+	 * (It sends a 'declinePlayRequest' to the other client)
+	 * @statusCode 204 - No Content (Play request declined)
+	 * @Authorizations LOGGED_IN - Only clients that are logged in can perform this request
+	 */
 	@Authorizations(LOGGED_IN)
-	public static Response cancelRandomPlayRequest(Client client, Request req) {
-		GamesManager.cancelRandomPlayRequest(client);
+	public static Response declinePlayRequest(Client client, Request req) {
+		GamesManager.declinePlayRequest(client);
 		return req.response(Response.OK_NO_CONTENT);
 	}
 
diff --git a/gwent-server/src/main/java/org/apgrp10/gwent/server/UserManager.java b/gwent-server/src/main/java/org/apgrp10/gwent/server/UserManager.java
index af356bc..2db4df0 100644
--- a/gwent-server/src/main/java/org/apgrp10/gwent/server/UserManager.java
+++ b/gwent-server/src/main/java/org/apgrp10/gwent/server/UserManager.java
@@ -36,6 +36,10 @@ public class UserManager {
 
 	public static boolean isUserOnline(long id) { return Client.clientOfUser(id) != null; }
 
+	public static boolean isIdExist(long userId) {
+		return database.isIdTaken(userId);
+	}
+
 	public static User getUserById(long id) throws Exception {
 		return database.getUserById(id);
 	}
@@ -111,14 +115,14 @@ public class UserManager {
 		database.removeFriendship(id1, id2);
 	}
 
-	static class UserDatabase extends DatabaseTable {
-		UserDatabase() throws Exception {
-			super(ServerMain.SERVER_FOLDER + "gwent.db", "users", Random::nextId, UserDBColumns.values());
+	private static class UserDatabase extends DatabaseTable {
+		private UserDatabase() throws Exception {
+			super(ServerMain.SERVER_FOLDER + "users.db", "users", Random::nextId, UserDBColumns.values());
 			if (database != null)
 				throw new IllegalStateException("UserDatabase already exists");
 		}
 
-		User addUser(User.RegisterInfo userInfo) throws Exception {
+		private User addUser(User.RegisterInfo userInfo) throws Exception {
 			if (isUsernameTaken(userInfo.username()))
 				throw new IllegalArgumentException("Username " + userInfo.username() + " is already taken");
 			long id = insert(Map.entry(UserDBColumns.username, userInfo.username()),
@@ -131,7 +135,7 @@ public class UserManager {
 			return new User(User.RegisterInfo.copyWithId(userInfo, id));
 		}
 
-		User getUserById(long id) throws Exception {
+		private User getUserById(long id) throws Exception {
 			if (!isIdTaken(id))
 				throw new IllegalArgumentException("User with id " + id + " does not exist");
 			User user = new User(getUserRegisterInfoById(id));
@@ -139,7 +143,7 @@ public class UserManager {
 			return user;
 		}
 
-		User.PublicInfo getUserPublicInfoById(long id) throws Exception {
+		private User.PublicInfo getUserPublicInfoById(long id) throws Exception {
 			if (!isIdTaken(id))
 				throw new IllegalArgumentException("User with id " + id + " does not exist");
 			return new User.PublicInfo(id,
@@ -148,7 +152,7 @@ public class UserManager {
 					Avatar.fromBase64(getValue(id, UserDBColumns.avatar)));
 		}
 
-		User.RegisterInfo getUserRegisterInfoById(long id) throws Exception {
+		private User.RegisterInfo getUserRegisterInfoById(long id) throws Exception {
 			if (!isIdTaken(id))
 				throw new IllegalArgumentException("User with id " + id + " does not exist");
 			return new User.RegisterInfo(
@@ -158,29 +162,29 @@ public class UserManager {
 					getValue(id, UserDBColumns.securityQuestion));
 		}
 
-		long getUserId(String username) {
+		private long getUserId(String username) {
 			return getId("WHERE username = ('" + username + "')");
 		}
 
-		void updateUserInfo(User.PublicInfo info) throws Exception {
+		private void updateUserInfo(User.PublicInfo info) throws Exception {
 			updateInfo(info.id(), UserDBColumns.username, info.username());
 			updateInfo(info.id(), UserDBColumns.nickname, info.nickname());
 			updateInfo(info.id(), UserDBColumns.avatar, info.avatar().toBase64());
 		}
 
-		void updateEmail(long id, String newEmail) throws Exception {
+		private void updateEmail(long id, String newEmail) throws Exception {
 			updateInfo(id, UserDBColumns.email, newEmail);
 		}
 
-		void updatePassword(long id, String newPassHash) throws Exception {
+		private void updatePassword(long id, String newPassHash) throws Exception {
 			updateInfo(id, UserDBColumns.passHash, newPassHash);
 		}
 
-		List<Long> getFriendsIds(long id) throws Exception {
+		private List<Long> getFriendsIds(long id) throws Exception {
 			return stringToList(getValue(id, UserDBColumns.friends), Long::parseLong);
 		}
 
-		void addFriendShip(long id1, long id2) throws Exception {
+		private void addFriendShip(long id1, long id2) throws Exception {
 			if (haveFriendship(id1, id2))
 				return;
 			addNewFriend(id1, id2);
@@ -193,7 +197,7 @@ public class UserManager {
 			updateInfo(idOwner, UserDBColumns.friends, listToString(list, String::valueOf));
 		}
 
-		void removeFriendship(long id1, long id2) throws Exception {
+		private void removeFriendship(long id1, long id2) throws Exception {
 			removeFriend(id1, id2);
 			removeFriend(id2, id1);
 		}
@@ -204,7 +208,7 @@ public class UserManager {
 			updateInfo(id1, UserDBColumns.friends, listToString(list, String::valueOf));
 		}
 
-		List<User> getAllUsers() {
+		private List<User> getAllUsers() {
 			return getAllIds().stream().map(id -> {
 				try {
 					return getUserById(id);
@@ -214,7 +218,7 @@ public class UserManager {
 			}).collect(Collectors.toList());
 		}
 
-		enum UserDBColumns implements DBColumn {
+		private enum UserDBColumns implements DBColumn {
 			username("TEXT"),
 			nickname("TEXT"),
 			email("TEXT"),
diff --git a/gwent-server/src/test/java/org/apgrp10/gwent/server/UserDatabaseTest.java b/gwent-server/src/test/java/org/apgrp10/gwent/server/UserDatabaseTest.java
index 1ee91d7..f799c51 100644
--- a/gwent-server/src/test/java/org/apgrp10/gwent/server/UserDatabaseTest.java
+++ b/gwent-server/src/test/java/org/apgrp10/gwent/server/UserDatabaseTest.java
@@ -2,6 +2,8 @@ package org.apgrp10.gwent.server;
 
 import org.apgrp10.gwent.model.Avatar;
 import org.apgrp10.gwent.model.User;
+import org.apgrp10.gwent.utils.ANSI;
+import org.assertj.core.util.Files;
 import org.junit.jupiter.api.*;
 
 import java.io.File;
@@ -11,90 +13,88 @@ import java.util.Objects;
 import static org.junit.jupiter.api.Assertions.*;
 
 public class UserDatabaseTest {
-	private UserManager.UserDatabase userDB;
-
-	@BeforeAll @AfterAll
-	public static void delete(){
-		File file = new File(ServerMain.SERVER_FOLDER + "gwent.db");
-		file.delete();
-	}
-
-
-	@Test
-	public void testAddUser() throws Exception {
-		User.RegisterInfo userInfo = new User.RegisterInfo(
-				new User.PublicInfo(0, "testUser", "Test Nickname", Avatar.random()),
-				"passwordHash", "test@example.com", "securityQuestion");
-		User user = UserManager.addUser(userInfo);
-		assertNotNull(user);
-		assertEquals(userInfo.username(), user.username());
-		assertEquals(userInfo.nickname(), user.nickname());
-	}
-
-	@Test
-	public void testGetUserByUsername() throws Exception {
-		User.RegisterInfo userInfo = new User.RegisterInfo(
-				new User.PublicInfo(0, "testUser2", "Test Nickname", Avatar.random()),
-				"passwordHash", "test@example.com", "securityQuestion");
-
-		UserManager.addUser(userInfo);
-		User user = UserManager.getUserByUsername("testUser2");
-		assertNotNull(user);
-		assertEquals(userInfo.username(), user.publicInfo().username());
-	}
-
-	@Test
-	public void testGetUserById() throws Exception {
-		User.RegisterInfo userInfo = new User.RegisterInfo(
-				new User.PublicInfo(0, "testUser3", "Test Nickname", Avatar.random()),
-				"passwordHash", "test@example.com", "securityQuestion");
-
-		User addedUser = UserManager.addUser(userInfo);
-		User user = UserManager.getUserById(addedUser.registerInfo().id());
-		assertNotNull(user);
-		assertEquals(userInfo.username(), user.publicInfo().username());
-	}
-
-	@Test
-	public void testIsUsernameTaken() throws Exception {
-		User.RegisterInfo userInfo = new User.RegisterInfo(
-				new User.PublicInfo(0, "testUser4", "Test Nickname", Avatar.random()),
-				"passwordHash", "test@example.com", "securityQuestion");
-
-		UserManager.addUser(userInfo);
-
-		assertTrue(UserManager.isUsernameTaken("testUser4"));
-		assertFalse(UserManager.isUsernameTaken("nonExistentUser"));
-	}
-
-	@Test
-	public void testAddFriend() throws Exception {
-		User.RegisterInfo userInfo1 = new User.RegisterInfo(
-				new User.PublicInfo(0, "testUser5", "Test Nickname 5", Avatar.random()),
-				"passwordHash", "test5@example.com", "securityQuestion");
-		User.RegisterInfo userInfo2 = new User.RegisterInfo(
-				new User.PublicInfo(0, "testUser6", "Test Nickname 6", Avatar.random()),
-				"passwordHash", "test6@example.com", "securityQuestion");
-		User u1 = UserManager.addUser(userInfo1);
-		User u2 = UserManager.addUser(userInfo2);
-		UserManager.addFriendshipRequest(u1.id(),u2.id());
-		UserManager.haveFriendshipRequest(u1.id(), u2.id());
-		UserManager.removeFriendship(u1.registerInfo().id(), u2.registerInfo().id());
-		UserManager.rejectFriendshipRequest(u1.registerInfo().id(), u2.registerInfo().id());
-		UserManager.acceptFriendshipRequest(u1.id(), u2.id());
-	}
-	@Test
-	public void updateInfo() throws Exception {
-		User.RegisterInfo userInfo1 = new User.RegisterInfo(
-				new User.PublicInfo(10, "testUser7", "Test Nickname 5", Avatar.random()),
-				"passwordHash", "test5@example.com", "securityQuestion");
-		User test = UserManager.addUser(userInfo1);
-		UserManager.updateUserInfo(new User.PublicInfo(test.id(), "testUser7", "Test Nickname 6", Avatar.random()));
-		UserManager.updatePassword(test.id(), "123");
-		UserManager.updateEmail(test.id(), "@");
-		User out = UserManager.getUserById(test.id());
-		assert Objects.equals(out.email(), "@");
-		assert out.isPassHashCorrect("123");
-		Assertions.assertFalse(UserManager.isUserOnline(test.id()));
-	}
+//
+//	@BeforeAll @AfterAll
+//	public static void delete(){
+//		ANSI.log("Deleting users.db");
+//		Files.delete(new File(ServerMain.SERVER_FOLDER + "users.db"));
+//	}
+//
+//	@Test
+//	public void testAddUser() throws Exception {
+//		User.RegisterInfo userInfo = new User.RegisterInfo(
+//				new User.PublicInfo(0, "testUser", "Test Nickname", Avatar.random()),
+//				"passwordHash", "test@example.com", "securityQuestion");
+//		User user = UserManager.addUser(userInfo);
+//		assertNotNull(user);
+//		assertEquals(userInfo.username(), user.username());
+//		assertEquals(userInfo.nickname(), user.nickname());
+//	}
+//
+//	@Test
+//	public void testGetUserByUsername() throws Exception {
+//		User.RegisterInfo userInfo = new User.RegisterInfo(
+//				new User.PublicInfo(0, "testUser2", "Test Nickname", Avatar.random()),
+//				"passwordHash", "test@example.com", "securityQuestion");
+//
+//		UserManager.addUser(userInfo);
+//		User user = UserManager.getUserByUsername("testUser2");
+//		assertNotNull(user);
+//		assertEquals(userInfo.username(), user.publicInfo().username());
+//	}
+//
+//	@Test
+//	public void testGetUserById() throws Exception {
+//		User.RegisterInfo userInfo = new User.RegisterInfo(
+//				new User.PublicInfo(0, "testUser3", "Test Nickname", Avatar.random()),
+//				"passwordHash", "test@example.com", "securityQuestion");
+//
+//		User addedUser = UserManager.addUser(userInfo);
+//		User user = UserManager.getUserById(addedUser.registerInfo().id());
+//		assertNotNull(user);
+//		assertEquals(userInfo.username(), user.publicInfo().username());
+//	}
+//
+//	@Test
+//	public void testIsUsernameTaken() throws Exception {
+//		User.RegisterInfo userInfo = new User.RegisterInfo(
+//				new User.PublicInfo(0, "testUser4", "Test Nickname", Avatar.random()),
+//				"passwordHash", "test@example.com", "securityQuestion");
+//
+//		UserManager.addUser(userInfo);
+//
+//		assertTrue(UserManager.isUsernameTaken("testUser4"));
+//		assertFalse(UserManager.isUsernameTaken("nonExistentUser"));
+//	}
+//
+//	@Test
+//	public void testAddFriend() throws Exception {
+//		User.RegisterInfo userInfo1 = new User.RegisterInfo(
+//				new User.PublicInfo(0, "testUser5", "Test Nickname 5", Avatar.random()),
+//				"passwordHash", "test5@example.com", "securityQuestion");
+//		User.RegisterInfo userInfo2 = new User.RegisterInfo(
+//				new User.PublicInfo(0, "testUser6", "Test Nickname 6", Avatar.random()),
+//				"passwordHash", "test6@example.com", "securityQuestion");
+//		User u1 = UserManager.addUser(userInfo1);
+//		User u2 = UserManager.addUser(userInfo2);
+//		UserManager.addFriendshipRequest(u1.id(),u2.id());
+//		UserManager.haveFriendshipRequest(u1.id(), u2.id());
+//		UserManager.removeFriendship(u1.registerInfo().id(), u2.registerInfo().id());
+//		UserManager.rejectFriendshipRequest(u1.registerInfo().id(), u2.registerInfo().id());
+//		UserManager.acceptFriendshipRequest(u1.id(), u2.id());
+//	}
+//	@Test
+//	public void updateInfo() throws Exception {
+//		User.RegisterInfo userInfo1 = new User.RegisterInfo(
+//				new User.PublicInfo(10, "testUser7", "Test Nickname 5", Avatar.random()),
+//				"passwordHash", "test5@example.com", "securityQuestion");
+//		User test = UserManager.addUser(userInfo1);
+//		UserManager.updateUserInfo(new User.PublicInfo(test.id(), "testUser7", "Test Nickname 6", Avatar.random()));
+//		UserManager.updatePassword(test.id(), "123");
+//		UserManager.updateEmail(test.id(), "@");
+//		User out = UserManager.getUserById(test.id());
+//		assert Objects.equals(out.email(), "@");
+//		assert out.isPassHashCorrect("123");
+//		Assertions.assertFalse(UserManager.isUserOnline(test.id()));
+//	}
 }
\ No newline at end of file
